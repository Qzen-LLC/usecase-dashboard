steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    args: ['ci']
    id: 'install-dependencies'

  # Generate Prisma client
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'prisma', 'generate']
    id: 'generate-prisma'
    waitFor: ['install-dependencies']

  # Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:$BRANCH_NAME'
      - '--cache-from'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:latest'
      - '.'
    id: 'build-image'
    waitFor: ['generate-prisma']

  # Push to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}'
    id: 'push-image'
    waitFor: ['build-image']

  # Deploy to Cloud Run (production)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--port'
      - '3000'
      - '--allow-unauthenticated'
      - '--min-instances'
      - '${_MIN_INSTANCES}'
      - '--max-instances'
      - '${_MAX_INSTANCES}'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--timeout'
      - '300'
      - '--set-env-vars'
      - 'NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1,GCP_PROJECT_ID=$PROJECT_ID,GCP_STORAGE_BUCKET=${_STORAGE_BUCKET}'
      - '--set-secrets'
      - 'DATABASE_URL=database-url:latest,CLERK_SECRET_KEY=clerk-secret-key:latest,NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=clerk-publishable-key:latest,UPSTASH_REDIS_REST_URL=upstash-redis-url:latest,UPSTASH_REDIS_REST_TOKEN=upstash-redis-token:latest,REDIS_URL=redis-url:latest,WEBHOOK_SECRET=webhook-secret:latest'
    id: 'deploy-service'
    waitFor: ['push-image']

  # Deploy to staging (if not main branch)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" != "main" && "$BRANCH_NAME" != "master" ]]; then
          gcloud run deploy ${_SERVICE_NAME}-staging \
            --image ${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:$COMMIT_SHA \
            --region ${_REGION} \
            --platform managed \
            --port 3000 \
            --allow-unauthenticated \
            --min-instances 0 \
            --max-instances 10 \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --set-env-vars "NODE_ENV=staging,NEXT_TELEMETRY_DISABLED=1,GCP_PROJECT_ID=$PROJECT_ID,GCP_STORAGE_BUCKET=${_STORAGE_BUCKET}-staging"
        fi
    id: 'deploy-staging'
    waitFor: ['push-image']

# Substitution variables
substitutions:
  _SERVICE_NAME: usecase-dashboard
  _REGION: us-central1
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '100'
  _STORAGE_BUCKET: ${PROJECT_ID}-uploads

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'N1_HIGHCPU_8'
  diskSizeGb: 100
  substitutionOption: 'ALLOW_LOOSE'

# Build timeout
timeout: 1200s

# Artifacts to store
artifacts:
  images:
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:$COMMIT_SHA'
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:latest'
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/docker-repo/${_SERVICE_NAME}:$BRANCH_NAME'