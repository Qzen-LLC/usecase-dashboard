generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UseCase {
  id                       String              @id @default(uuid())
  title                    String
  problemStatement         String
  proposedAISolution       String
  currentState             String
  desiredState             String
  primaryStakeholders      String[]
  secondaryStakeholders    String[]
  successCriteria          String[]
  problemValidation        String
  solutionHypothesis       String
  keyAssumptions           String[]
  initialROI               String
  confidenceLevel          Int
  operationalImpactScore   Int
  productivityImpactScore  Int
  revenueImpactScore       Int
  implementationComplexity Int
  estimatedTimeline        String
  requiredResources        String
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  priority                 String?
  stage                    String?
  businessFunction         String
  aiucId                   Int
  organizationId           String?
  userId                   String?
  Approval                 Approval?
  assessData               Assess?
  euAiActAssessments       EuAiActAssessment?
  finopsData               FinOps?
  iso42001Assessments      Iso42001Assessment?
  organization             Organization?       @relation(fields: [organizationId], references: [id])
  user                     User?               @relation(fields: [userId], references: [id])
  risks                    Risk[]

  @@unique([aiucId, organizationId])
  @@unique([aiucId, userId])
  @@index([stage])
  @@index([priority])
  @@index([businessFunction])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([stage, priority])
  @@index([businessFunction, stage])
  @@index([organizationId])
  @@index([userId])
  @@index([organizationId, userId])
}

model FinOps {
  useCaseId       String  @id
  ROI             Float
  netValue        Float
  apiCostBase     Float
  cumOpCost       Float
  cumValue        Float
  devCostBase     Float
  infraCostBase   Float
  opCostBase      Float
  totalInvestment Float
  valueBase       Float
  valueGrowthRate Float
  budgetRange     String?
  useCase         UseCase @relation(fields: [useCaseId], references: [id])
}

model Assess {
  useCaseId String   @id
  createdAt DateTime @default(now())
  stepsData Json
  updatedAt DateTime
  UseCase   UseCase  @relation(fields: [useCaseId], references: [id])
}

model Approval {
  id                 String   @id @default(uuid())
  useCaseId          String   @unique
  governanceName     String?
  governanceStatus   String?
  governanceComment  String?
  riskName           String?
  riskStatus         String?
  riskComment        String?
  legalName          String?
  legalStatus        String?
  legalComment       String?
  businessFunction   String?
  businessName       String?
  businessStatus     String?
  businessComment    String?
  finalQualification String?
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
  useCase            UseCase  @relation(fields: [useCaseId], references: [id])

  @@index([governanceStatus])
  @@index([riskStatus])
  @@index([legalStatus])
  @@index([businessStatus])
  @@index([finalQualification])
}

model Vendor {
  id               String            @id @default(uuid())
  name             String
  category         String
  website          String?
  contactPerson    String?
  contactEmail     String?
  assessmentDate   DateTime?
  overallScore     Float             @default(0.0)
  status           VendorStatus      @default(IN_ASSESSMENT)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String?
  organizationId   String?
  approvalAreas    ApprovalArea[]
  assessmentScores AssessmentScore[]
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([overallScore])
  @@index([category, status])
  @@index([userId])
  @@index([organizationId])
}

model AssessmentScore {
  id          String   @id @default(uuid())
  vendorId    String
  category    String
  subcategory String
  score       Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, category, subcategory])
}

model ApprovalArea {
  id           String           @id @default(uuid())
  vendorId     String
  area         ApprovalAreaType
  status       ApprovalStatus   @default(PENDING)
  approvedBy   String?
  approvedDate DateTime?
  comments     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  vendor       Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, area])
}

model EuAiActTopic {
  id          String            @id @default(uuid())
  topicId     String            @unique
  title       String
  description String
  orderIndex  Int
  subtopics   EuAiActSubtopic[]

  @@index([orderIndex])
}

model EuAiActSubtopic {
  id          String            @id @default(uuid())
  subtopicId  String            @unique
  title       String
  description String
  orderIndex  Int
  topicId     String
  questions   EuAiActQuestion[]
  topic       EuAiActTopic      @relation(fields: [topicId], references: [topicId])

  @@index([topicId, orderIndex])
}

model EuAiActQuestion {
  id         String          @id @default(uuid())
  questionId String          @unique
  question   String
  priority   String
  answerType String
  orderIndex Int
  subtopicId String
  answers    EuAiActAnswer[]
  subtopic   EuAiActSubtopic @relation(fields: [subtopicId], references: [subtopicId])

  @@index([subtopicId, orderIndex])
}

model EuAiActAnswer {
  id            String            @id @default(uuid())
  answer        String?
  evidenceFiles String[]
  status        String            @default("pending")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  questionId    String
  assessmentId  String
  assessment    EuAiActAssessment @relation(fields: [assessmentId], references: [id])
  question      EuAiActQuestion   @relation(fields: [questionId], references: [questionId])

  @@unique([questionId, assessmentId])
  @@index([assessmentId])
}

model EuAiActAssessment {
  id        String           @id @default(uuid())
  useCaseId String           @unique
  status    String           @default("in_progress")
  progress  Float            @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  answers   EuAiActAnswer[]
  useCase   UseCase          @relation(fields: [useCaseId], references: [id])
  controls  EuAiActControl[]

  @@index([status])
}

model EuAiActControlCategory {
  id          String                 @id @default(uuid())
  categoryId  String                 @unique
  title       String
  description String
  orderIndex  Int
  controls    EuAiActControlStruct[]

  @@index([orderIndex])
}

model EuAiActControlStruct {
  id          String                    @id @default(uuid())
  controlId   String                    @unique
  title       String
  description String
  orderIndex  Int
  categoryId  String
  instances   EuAiActControl[]
  category    EuAiActControlCategory    @relation(fields: [categoryId], references: [categoryId])
  subcontrols EuAiActSubcontrolStruct[]

  @@index([categoryId, orderIndex])
}

model EuAiActSubcontrolStruct {
  id           String               @id @default(uuid())
  subcontrolId String               @unique
  title        String
  description  String
  orderIndex   Int
  controlId    String
  instances    EuAiActSubcontrol[]
  control      EuAiActControlStruct @relation(fields: [controlId], references: [controlId])

  @@index([controlId, orderIndex])
}

model EuAiActControl {
  id            String               @id @default(uuid())
  status        String               @default("pending")
  notes         String?
  evidenceFiles String[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  controlId     String
  assessmentId  String
  assessment    EuAiActAssessment    @relation(fields: [assessmentId], references: [id])
  controlStruct EuAiActControlStruct @relation(fields: [controlId], references: [controlId])
  subcontrols   EuAiActSubcontrol[]

  @@unique([controlId, assessmentId])
  @@index([assessmentId])
}

model EuAiActSubcontrol {
  id               String                  @id @default(uuid())
  status           String                  @default("pending")
  notes            String?
  evidenceFiles    String[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  subcontrolId     String
  controlId        String
  control          EuAiActControl          @relation(fields: [controlId], references: [id])
  subcontrolStruct EuAiActSubcontrolStruct @relation(fields: [subcontrolId], references: [subcontrolId])

  @@unique([subcontrolId, controlId])
  @@index([controlId])
}

model Iso42001Clause {
  id          String              @id @default(uuid())
  clauseId    String              @unique
  title       String
  description String
  orderIndex  Int
  subclauses  Iso42001Subclause[]

  @@index([orderIndex])
}

model Iso42001Subclause {
  id               String                      @id @default(uuid())
  subclauseId      String                      @unique
  title            String
  summary          String
  questions        String[]
  evidenceExamples String[]
  orderIndex       Int
  clauseId         String
  clause           Iso42001Clause              @relation(fields: [clauseId], references: [clauseId])
  instances        Iso42001SubclauseInstance[]

  @@index([clauseId, orderIndex])
}

model Iso42001SubclauseInstance {
  id             String             @id @default(uuid())
  implementation String?
  evidenceFiles  String[]
  status         String             @default("pending")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  subclauseId    String
  assessmentId   String
  assessment     Iso42001Assessment @relation(fields: [assessmentId], references: [id])
  subclause      Iso42001Subclause  @relation(fields: [subclauseId], references: [subclauseId])

  @@unique([subclauseId, assessmentId])
  @@index([assessmentId])
}

model Iso42001Assessment {
  id         String                      @id @default(uuid())
  useCaseId  String                      @unique
  status     String                      @default("in_progress")
  progress   Float                       @default(0)
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt
  annexes    Iso42001AnnexInstance[]
  useCase    UseCase                     @relation(fields: [useCaseId], references: [id])
  subclauses Iso42001SubclauseInstance[]

  @@index([status])
}

model Iso42001AnnexCategory {
  id          String              @id @default(uuid())
  categoryId  String              @unique
  title       String
  description String
  orderIndex  Int
  items       Iso42001AnnexItem[]

  @@index([orderIndex])
}

model Iso42001AnnexItem {
  id          String                  @id @default(uuid())
  itemId      String                  @unique
  title       String
  description String
  guidance    String
  orderIndex  Int
  categoryId  String
  instances   Iso42001AnnexInstance[]
  category    Iso42001AnnexCategory   @relation(fields: [categoryId], references: [categoryId])

  @@index([categoryId, orderIndex])
}

model Iso42001AnnexInstance {
  id             String             @id @default(uuid())
  assessmentId   String
  itemId         String
  status         String             @default("NOT_STARTED")
  implementation String?
  evidenceFiles  String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  item           Iso42001AnnexItem  @relation(fields: [itemId], references: [id], map: "Iso42001AnnexInstance_annexItemId_fkey")
  assessment     Iso42001Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, itemId], map: "Iso42001AnnexInstance_assessmentId_annexItemId_key")
  @@index([assessmentId])
}

model User {
  id             String        @id @default(uuid())
  clerkId        String        @unique
  email          String        @unique
  firstName      String?
  lastName       String?
  role           UserRole      @default(USER)
  organizationId String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  invitations    Invitation[]  @relation("InvitedBy")
  useCases       UseCase[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  vendors        Vendor[]

  @@index([email])
  @@index([organizationId])
  @@index([role])
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  domain      String?      @unique
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invitations Invitation[] @relation("OrganizationInvitations")
  useCases    UseCase[]
  users       User[]
  vendors     Vendor[]

  @@index([name])
  @@index([domain])
}

model Invitation {
  id             String           @id @default(uuid())
  email          String
  role           UserRole         @default(USER)
  organizationId String
  invitedById    String
  status         InvitationStatus @default(PENDING)
  token          String           @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  invitedBy      User             @relation("InvitedBy", fields: [invitedById], references: [id])
  organization   Organization     @relation("OrganizationInvitations", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([status])
  @@index([token])
  @@index([expiresAt])
}

model Risk {
  id                String       @id @default(uuid())
  useCaseId         String
  category          String       // technical, business, data, ethical, operational, regulatory
  riskLevel         String       // Low, Medium, High, Critical
  riskScore         Float
  title             String
  description       String
  impact            String
  likelihood        String
  status            RiskStatus   @default(OPEN)
  assignedTo        String?
  assignedToName    String?
  assignedToEmail   String?
  mitigationPlan    String?
  mitigationStatus  String?      // planned, in_progress, completed
  targetDate        DateTime?
  actualDate        DateTime?
  notes             String?
  createdAt         DateTime     @default(now())
  createdBy         String
  createdByName     String
  createdByEmail    String
  updatedAt         DateTime     @updatedAt
  updatedBy         String?
  updatedByName     String?
  updatedByEmail    String?
  closedAt          DateTime?
  closedBy          String?
  closedByName      String?
  closedByEmail     String?
  closureReason     String?
  useCase           UseCase      @relation(fields: [useCaseId], references: [id])

  @@index([useCaseId])
  @@index([status])
  @@index([category])
  @@index([riskLevel])
  @@index([createdAt])
}

enum RiskStatus {
  OPEN
  IN_PROGRESS
  MITIGATED
  ACCEPTED
  CLOSED
}

enum VendorStatus {
  IN_ASSESSMENT
  APPROVED
  REJECTED
  ON_HOLD
}

enum ApprovalAreaType {
  PROCUREMENT
  LEGAL
  GOVERNANCE
  COMPLIANCE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum UserRole {
  QZEN_ADMIN
  ORG_ADMIN
  ORG_USER
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
