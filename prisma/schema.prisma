generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UseCase {
  id                       String    @id @default(uuid())
  aiucId                   Int       @default(autoincrement())
  title                    String
  problemStatement         String
  proposedAISolution       String
  currentState             String
  desiredState             String
  primaryStakeholders      String[]
  secondaryStakeholders    String[]
  successCriteria          String[]
  problemValidation        String
  solutionHypothesis       String
  keyAssumptions           String[]
  initialROI               String
  confidenceLevel          Int
  operationalImpactScore   Int
  productivityImpactScore  Int
  revenueImpactScore       Int
  implementationComplexity Int
  estimatedTimeline        String
  requiredResources        String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  priority                 String?
  stage                    String?
  businessFunction         String
  Approval                 Approval?
  assessData               Assess?
  finopsData               FinOps?

  @@unique([aiucId])
  @@index([stage])
  @@index([priority])
  @@index([businessFunction])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([stage, priority])
  @@index([businessFunction, stage])
}

model FinOps {
  useCaseId       String  @id
  ROI             Float
  netValue        Float
  apiCostBase     Float
  cumOpCost       Float
  cumValue        Float
  devCostBase     Float
  infraCostBase   Float
  opCostBase      Float
  totalInvestment Float
  valueBase       Float
  valueGrowthRate Float
  budgetRange     String?
  useCase         UseCase @relation(fields: [useCaseId], references: [id])
}

model Assess {
  useCaseId   String   @id
  createdAt   DateTime @default(now())
  stepsData   Json
  updatedAt   DateTime
  UseCase     UseCase  @relation(fields: [useCaseId], references: [id])
}

model Approval {
  id                 String   @id @default(uuid())
  useCaseId          String   @unique
  governanceName     String?
  governanceStatus   String?
  governanceComment  String?
  riskName           String?
  riskStatus         String?
  riskComment        String?
  legalName          String?
  legalStatus        String?
  legalComment       String?
  businessFunction   String?
  businessName       String?
  businessStatus     String?
  businessComment    String?
  finalQualification String?
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
  useCase            UseCase  @relation(fields: [useCaseId], references: [id])

  @@index([governanceStatus])
  @@index([riskStatus])
  @@index([legalStatus])
  @@index([businessStatus])
  @@index([finalQualification])
}

model Vendor {
  id               String            @id @default(uuid())
  name             String
  category         String
  website          String?
  contactPerson    String?
  contactEmail     String?
  assessmentDate   DateTime?
  overallScore     Float             @default(0.0)
  status           VendorStatus      @default(IN_ASSESSMENT)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  approvalAreas    ApprovalArea[]
  assessmentScores AssessmentScore[]

  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([overallScore])
  @@index([category, status])
}

model AssessmentScore {
  id          String   @id @default(uuid())
  vendorId    String
  category    String
  subcategory String
  score       Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, category, subcategory])
}

model ApprovalArea {
  id           String           @id @default(uuid())
  vendorId     String
  area         ApprovalAreaType
  status       ApprovalStatus   @default(PENDING)
  approvedBy   String?
  approvedDate DateTime?
  comments     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  vendor       Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, area])
}

enum VendorStatus {
  IN_ASSESSMENT
  APPROVED
  REJECTED
  ON_HOLD
}

enum ApprovalAreaType {
  PROCUREMENT
  LEGAL
  GOVERNANCE
  COMPLIANCE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}
