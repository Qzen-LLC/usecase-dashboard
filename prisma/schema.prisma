generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UseCase {
  id                       String              @id @default(uuid())
  title                    String
  problemStatement         String
  proposedAISolution       String
  currentState             String
  desiredState             String
  primaryStakeholders      String[]
  secondaryStakeholders    String[]
  successCriteria          String
  problemValidation        String
  solutionHypothesis       String
  keyAssumptions           String
  initialROI               String
  confidenceLevel          Int
  operationalImpactScore   Int
  productivityImpactScore  Int
  revenueImpactScore       Int
  implementationComplexity Int
  estimatedTimeline        String
  requiredResources        String
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  priority                 String?
  stage                    String?
  aiucId                   Int
  estimatedTimelineMonths  String?             @default("")
  initialCost              String?             @default("")
  keyBenefits              String?             @default("")
  plannedStartDate         String?             @default("")
  organizationId           String?
  userId                   String?
  businessFunction         String?
  Approval                 Approval?
  assessData               Assess?
  euAiActAssessments       EuAiActAssessment?
  finopsData               FinOps?
  iso42001Assessments      Iso42001Assessment?
  Lock                     Lock[]
  promptTemplates          PromptTemplate[]
  risks                    Risk[]
  uaeAiAssessments         UaeAiAssessment?
  organization             Organization?       @relation(fields: [organizationId], references: [id])
  user                     User?               @relation(fields: [userId], references: [id])

  @@unique([aiucId, organizationId])
  @@unique([aiucId, userId])
  @@index([stage])
  @@index([priority])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([stage, priority])
  @@index([organizationId])
  @@index([userId])
  @@index([organizationId, userId])
}

model FinOps {
  useCaseId       String  @id
  ROI             Float
  netValue        Float
  apiCostBase     Float
  cumOpCost       Float
  cumValue        Float
  devCostBase     Float
  infraCostBase   Float
  opCostBase      Float
  totalInvestment Float
  valueBase       Float
  valueGrowthRate Float
  budgetRange     String?
  useCase         UseCase @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
}

model Assess {
  useCaseId String   @id
  createdAt DateTime @default(now())
  stepsData Json
  updatedAt DateTime @updatedAt
  UseCase   UseCase  @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
}

model Approval {
  id                 String   @id @default(uuid())
  useCaseId          String   @unique
  governanceName     String?
  governanceStatus   String?
  governanceComment  String?
  riskName           String?
  riskStatus         String?
  riskComment        String?
  legalName          String?
  legalStatus        String?
  legalComment       String?
  businessFunction   String?
  businessName       String?
  businessStatus     String?
  businessComment    String?
  finalQualification String?
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
  useCase            UseCase  @relation(fields: [useCaseId], references: [id], onDelete: Cascade)

  @@index([governanceStatus])
  @@index([riskStatus])
  @@index([legalStatus])
  @@index([businessStatus])
  @@index([finalQualification])
}

model Vendor {
  id               String            @id @default(uuid())
  name             String
  category         String
  website          String?
  contactPerson    String?
  contactEmail     String?
  assessmentDate   DateTime?
  overallScore     Float             @default(0.0)
  status           VendorStatus      @default(IN_ASSESSMENT)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organizationId   String?
  userId           String?
  approvalAreas    ApprovalArea[]
  assessmentScores AssessmentScore[]
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([overallScore])
  @@index([category, status])
  @@index([userId])
  @@index([organizationId])
}

model AssessmentScore {
  id          String   @id @default(uuid())
  vendorId    String
  category    String
  subcategory String
  score       Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, category, subcategory])
}

model ApprovalArea {
  id           String           @id @default(uuid())
  vendorId     String
  area         ApprovalAreaType
  status       ApprovalStatus   @default(PENDING)
  approvedBy   String?
  approvedDate DateTime?
  comments     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  vendor       Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, area])
}

model EuAiActTopic {
  id          String            @id @default(uuid())
  topicId     String            @unique
  title       String
  description String
  orderIndex  Int
  subtopics   EuAiActSubtopic[]

  @@index([orderIndex])
}

model EuAiActSubtopic {
  id          String            @id @default(uuid())
  subtopicId  String            @unique
  title       String
  description String
  orderIndex  Int
  topicId     String
  questions   EuAiActQuestion[]
  topic       EuAiActTopic      @relation(fields: [topicId], references: [topicId])

  @@index([topicId, orderIndex])
}

model EuAiActQuestion {
  id         String          @id @default(uuid())
  questionId String          @unique
  question   String
  priority   String
  answerType String
  orderIndex Int
  subtopicId String
  answers    EuAiActAnswer[]
  subtopic   EuAiActSubtopic @relation(fields: [subtopicId], references: [subtopicId])

  @@index([subtopicId, orderIndex])
}

model EuAiActAnswer {
  id            String            @id @default(uuid())
  answer        String?
  evidenceFiles String[]
  status        String            @default("pending")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  questionId    String
  assessmentId  String
  assessment    EuAiActAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question      EuAiActQuestion   @relation(fields: [questionId], references: [questionId])

  @@unique([questionId, assessmentId])
  @@index([assessmentId])
}

model EuAiActAssessment {
  id        String           @id @default(uuid())
  useCaseId String           @unique
  status    String           @default("in_progress")
  progress  Float            @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  answers   EuAiActAnswer[]
  useCase   UseCase          @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
  controls  EuAiActControl[]

  @@index([status])
}

model EuAiActControlCategory {
  id          String                 @id @default(uuid())
  categoryId  String                 @unique
  title       String
  description String
  orderIndex  Int
  controls    EuAiActControlStruct[]

  @@index([orderIndex])
}

model EuAiActControlStruct {
  id          String                    @id @default(uuid())
  controlId   String                    @unique
  title       String
  description String
  orderIndex  Int
  categoryId  String
  instances   EuAiActControl[]
  category    EuAiActControlCategory    @relation(fields: [categoryId], references: [categoryId])
  subcontrols EuAiActSubcontrolStruct[]

  @@index([categoryId, orderIndex])
}

model EuAiActSubcontrolStruct {
  id           String               @id @default(uuid())
  subcontrolId String               @unique
  title        String
  description  String
  orderIndex   Int
  controlId    String
  instances    EuAiActSubcontrol[]
  control      EuAiActControlStruct @relation(fields: [controlId], references: [controlId])

  @@index([controlId, orderIndex])
}

model EuAiActControl {
  id            String               @id @default(uuid())
  status        String               @default("pending")
  notes         String?
  evidenceFiles String[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  controlId     String
  assessmentId  String
  assessment    EuAiActAssessment    @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  controlStruct EuAiActControlStruct @relation(fields: [controlId], references: [controlId])
  subcontrols   EuAiActSubcontrol[]

  @@unique([controlId, assessmentId])
  @@index([assessmentId])
}

model EuAiActSubcontrol {
  id               String                  @id @default(uuid())
  status           String                  @default("pending")
  notes            String?
  evidenceFiles    String[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  subcontrolId     String
  controlId        String
  control          EuAiActControl          @relation(fields: [controlId], references: [id], onDelete: Cascade)
  subcontrolStruct EuAiActSubcontrolStruct @relation(fields: [subcontrolId], references: [subcontrolId])

  @@unique([subcontrolId, controlId])
  @@index([controlId])
}

model Iso42001Clause {
  id          String              @id @default(uuid())
  clauseId    String              @unique
  title       String
  description String
  orderIndex  Int
  subclauses  Iso42001Subclause[]

  @@index([orderIndex])
}

model Iso42001Subclause {
  id               String                      @id @default(uuid())
  subclauseId      String                      @unique
  title            String
  summary          String
  questions        String[]
  evidenceExamples String[]
  orderIndex       Int
  clauseId         String
  clause           Iso42001Clause              @relation(fields: [clauseId], references: [clauseId])
  instances        Iso42001SubclauseInstance[]

  @@index([clauseId, orderIndex])
}

model Iso42001SubclauseInstance {
  id             String             @id @default(uuid())
  implementation String?
  evidenceFiles  String[]
  status         String             @default("pending")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  subclauseId    String
  assessmentId   String
  assessment     Iso42001Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  subclause      Iso42001Subclause  @relation(fields: [subclauseId], references: [subclauseId])

  @@unique([subclauseId, assessmentId])
  @@index([assessmentId])
}

model Iso42001Assessment {
  id         String                      @id @default(uuid())
  useCaseId  String                      @unique
  status     String                      @default("in_progress")
  progress   Float                       @default(0)
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt
  annexes    Iso42001AnnexInstance[]
  useCase    UseCase                     @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
  subclauses Iso42001SubclauseInstance[]

  @@index([status])
}

model Iso42001AnnexCategory {
  id          String              @id @default(uuid())
  categoryId  String              @unique
  title       String
  description String
  orderIndex  Int
  items       Iso42001AnnexItem[]

  @@index([orderIndex])
}

model Iso42001AnnexItem {
  id          String                  @id @default(uuid())
  itemId      String                  @unique
  title       String
  description String
  guidance    String
  orderIndex  Int
  categoryId  String
  instances   Iso42001AnnexInstance[]
  category    Iso42001AnnexCategory   @relation(fields: [categoryId], references: [categoryId])

  @@index([categoryId, orderIndex])
}

model Iso42001AnnexInstance {
  id             String             @id @default(uuid())
  assessmentId   String
  status         String             @default("NOT_STARTED")
  evidenceFiles  String[]
  implementation String?
  itemId         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  item           Iso42001AnnexItem  @relation(fields: [itemId], references: [itemId], map: "Iso42001AnnexInstance_annexItemId_fkey")
  assessment     Iso42001Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, itemId], map: "Iso42001AnnexInstance_assessmentId_annexItemId_key")
  @@index([assessmentId])
}

model UaeAiControl {
  id            String                 @id @default(uuid())
  controlId     String                 @unique
  title         String
  description   String
  legalBasis    String
  evidenceTypes String[]
  orderIndex    Int
  instances     UaeAiControlInstance[]

  @@index([orderIndex])
}

model UaeAiControlInstance {
  id             String          @id @default(uuid())
  assessmentId   String
  controlId      String
  implementation String?
  evidenceFiles  String[]
  score          Int             @default(0) @db.SmallInt
  notes          String?
  status         String          @default("pending")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assessment     UaeAiAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  control        UaeAiControl    @relation(fields: [controlId], references: [controlId])

  @@unique([assessmentId, controlId])
  @@index([assessmentId])
}

model UaeAiAssessment {
  id              String                 @id @default(uuid())
  useCaseId       String                 @unique
  status          String                 @default("in_progress")
  progress        Float                  @default(0)
  totalScore      Float                  @default(0)
  weightedScore   Float                  @default(0)
  maturityLevel   String                 @default("not_assessed")
  riskImpactLevel String                 @default("low")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  useCase         UseCase                @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
  controls        UaeAiControlInstance[]

  @@index([status])
  @@index([maturityLevel])
  @@index([riskImpactLevel])
}

model User {
  id                                              String                @id @default(uuid())
  clerkId                                         String                @unique
  email                                           String                @unique
  firstName                                       String?
  lastName                                        String?
  role                                            UserRole              @default(USER)
  organizationId                                  String?
  isActive                                        Boolean               @default(true)
  createdAt                                       DateTime              @default(now())
  updatedAt                                       DateTime              @updatedAt
  invitations                                     Invitation[]          @relation("InvitedBy")
  LLMApiConfiguration                             LLMApiConfiguration[]
  Lock                                            Lock[]
  PromptDeployment                                PromptDeployment[]
  PromptTemplate_PromptTemplate_createdByIdToUser PromptTemplate[]      @relation("PromptTemplate_createdByIdToUser")
  PromptTemplate_PromptTemplate_userIdToUser      PromptTemplate[]      @relation("PromptTemplate_userIdToUser")
  PromptTestRun                                   PromptTestRun[]
  PromptVersion                                   PromptVersion[]
  useCases                                        UseCase[]
  organization                                    Organization?         @relation(fields: [organizationId], references: [id])
  vendors                                         Vendor[]

  @@index([email])
  @@index([organizationId])
  @@index([role])
}

model Organization {
  id             String           @id @default(uuid())
  name           String
  domain         String?          @unique
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  invitations    Invitation[]     @relation("OrganizationInvitations")
  PromptTemplate PromptTemplate[]
  useCases       UseCase[]
  users          User[]
  vendors        Vendor[]

  @@index([name])
  @@index([domain])
}

model Invitation {
  id             String           @id @default(uuid())
  email          String
  role           UserRole         @default(USER)
  organizationId String
  invitedById    String
  status         InvitationStatus @default(PENDING)
  token          String           @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  invitedBy      User             @relation("InvitedBy", fields: [invitedById], references: [id])
  organization   Organization     @relation("OrganizationInvitations", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([status])
  @@index([token])
  @@index([expiresAt])
}

model Risk {
  id               String     @id @default(uuid())
  useCaseId        String
  category         String
  riskLevel        String
  riskScore        Float
  title            String
  description      String
  impact           String
  likelihood       String
  status           RiskStatus @default(OPEN)
  assignedTo       String?
  assignedToName   String?
  assignedToEmail  String?
  mitigationPlan   String?
  mitigationStatus String?
  targetDate       DateTime?
  actualDate       DateTime?
  notes            String?
  createdAt        DateTime   @default(now())
  createdBy        String
  createdByName    String
  createdByEmail   String
  updatedAt        DateTime   @updatedAt
  updatedBy        String?
  updatedByName    String?
  updatedByEmail   String?
  closedAt         DateTime?
  closedBy         String?
  closedByName     String?
  closedByEmail    String?
  closureReason    String?
  useCase          UseCase    @relation(fields: [useCaseId], references: [id], onDelete: Cascade)

  @@index([useCaseId])
  @@index([status])
  @@index([category])
  @@index([riskLevel])
  @@index([createdAt])
}

model LLMApiConfiguration {
  id        String   @id @default(uuid())
  service   String
  endpoint  String?
  model     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apiKey    String
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, service])
  @@index([userId, isActive])
}

model PromptDeployment {
  id             String         @id @default(uuid())
  environment    String
  templateId     String
  versionId      String
  deployedAt     DateTime       @default(now())
  deployedById   String
  isActive       Boolean        @default(true)
  User           User           @relation(fields: [deployedById], references: [id])
  PromptTemplate PromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  PromptVersion  PromptVersion  @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([templateId, environment])
  @@index([deployedAt])
  @@index([environment, isActive])
}

model PromptTemplate {
  id                                    String             @id @default(uuid())
  name                                  String
  description                           String?
  content                               Json
  variables                             String[]
  settings                              Json
  type                                  String
  service                               String
  useCaseId                             String
  organizationId                        String?
  userId                                String?
  createdAt                             DateTime           @default(now())
  updatedAt                             DateTime           @updatedAt
  createdById                           String
  tags                                  String[]           @default([])
  PromptDeployment                      PromptDeployment[]
  User_PromptTemplate_createdByIdToUser User               @relation("PromptTemplate_createdByIdToUser", fields: [createdById], references: [id])
  Organization                          Organization?      @relation(fields: [organizationId], references: [id])
  UseCase                               UseCase            @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
  User_PromptTemplate_userIdToUser      User?              @relation("PromptTemplate_userIdToUser", fields: [userId], references: [id])
  PromptTestRun                         PromptTestRun[]
  PromptVersion                         PromptVersion[]

  @@index([createdAt])
  @@index([organizationId])
  @@index([useCaseId])
  @@index([userId])
}

model PromptTestRun {
  id               String         @id @default(uuid())
  versionId        String
  variables        Json
  tokensUsed       Int            @default(0)
  cost             Float          @default(0)
  latencyMs        Int            @default(0)
  status           String
  error            String?
  createdAt        DateTime       @default(now())
  model            String
  promptTemplateId String
  requestContent   Json
  responseContent  String
  service          String
  settings         Json
  userId           String
  PromptTemplate   PromptTemplate @relation(fields: [promptTemplateId], references: [id], onDelete: Cascade)
  User             User           @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([promptTemplateId])
  @@index([status])
  @@index([userId])
  @@index([versionId])
}

model PromptVersion {
  id               String             @id @default(uuid())
  versionSha       String             @unique
  versionNumber    Int
  content          Json
  settings         Json
  variables        String[]
  commitMessage    String
  templateId       String
  createdAt        DateTime           @default(now())
  createdById      String
  versionNotes     String?
  PromptDeployment PromptDeployment[]
  User             User               @relation(fields: [createdById], references: [id])
  PromptTemplate   PromptTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([templateId, versionNumber])
}

model Lock {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  useCaseId  String
  userId     String
  type       LockType
  acquiredAt DateTime  @default(now())
  expiresAt  DateTime
  isActive   Boolean   @default(true)
  scope      LockScope @default(ASSESS)
  UseCase    UseCase   @relation(fields: [useCaseId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([useCaseId, userId, type, scope])
  @@index([expiresAt])
  @@index([isActive])
  @@index([type])
  @@index([useCaseId])
  @@index([userId])
  @@index([scope])
}

enum RiskStatus {
  OPEN
  IN_PROGRESS
  MITIGATED
  ACCEPTED
  CLOSED
}

enum VendorStatus {
  IN_ASSESSMENT
  APPROVED
  REJECTED
  ON_HOLD
}

enum ApprovalAreaType {
  PROCUREMENT
  LEGAL
  GOVERNANCE
  COMPLIANCE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum UserRole {
  QZEN_ADMIN
  ORG_ADMIN
  ORG_USER
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum LockType {
  SHARED
  EXCLUSIVE
}

enum LockScope {
  ASSESS
  EDIT
}
